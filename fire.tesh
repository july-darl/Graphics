#version 450 core
layout (triangles, equal_spacing, ccw) in;

uniform mat4 ModelMatrix;
uniform mat4 IT_ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectMatrix;
uniform float time;
uniform sampler2D perlin;

in vec2 c_texcoord[gl_MaxPatchVertices];
in float c_fireRatio[gl_MaxPatchVertices];

out vec2 v_texcoord;
out float v_fireRatio;

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

float interpolate1D(float v0, float v1, float v2)
{
    return (gl_TessCoord.x) * v0 + (gl_TessCoord.y) * v1 + (gl_TessCoord.z) * v2;
}

void main(void)
{
    float ratio = interpolate1D(c_fireRatio[0], c_fireRatio[1], c_fireRatio[2]);
    vec4 tmp = gl_in[0].gl_Position * gl_TessCoord.x +
               gl_in[1].gl_Position * gl_TessCoord.y +
               gl_in[2].gl_Position * gl_TessCoord.z;

    vec3 pos = tmp.xyz/tmp.w;
    v_fireRatio = ratio;
    v_texcoord = interpolate2D(c_texcoord[0],c_texcoord[1],c_texcoord[2]);

    if(ratio > 0)
    {
        vec3 dir = normalize(vec3(0.5,1,0));
        float offset = texture(perlin,vec2(pos.x,pos.z) /10 + time).r;
        offset = clamp((offset - 0.5) / (1 - 0.5),0,1);
        pos += dir * 0.5 * offset;
    }

    gl_Position = ModelMatrix * vec4(pos,1);
    gl_Position = ViewMatrix  * gl_Position;
    gl_Position = ProjectMatrix * gl_Position;

}
