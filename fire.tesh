#version 450 core
layout (triangles, equal_spacing, ccw) in;

uniform mat4 ModelMatrix;
uniform mat4 IT_ModelMatrix;
uniform mat4 ViewMatrix;
uniform mat4 ProjectMatrix;
uniform float time;
uniform sampler2D noise;
uniform float radius;
uniform vec3 windDir;

in vec2 c_texcoord[gl_MaxPatchVertices];
in vec3 c_normal[gl_MaxPatchVertices];
in vec3 c_tangent[gl_MaxPatchVertices];

out vec2 v_texcoord;
out vec3 v_normal;
out vec3 v_tangent;
out vec2 v_depth;
out vec3 v_worldPos;

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

float interpolate1D(float v0, float v1, float v2)
{
    return (gl_TessCoord.x) * v0 + (gl_TessCoord.y) * v1 + (gl_TessCoord.z) * v2;
}

vec2 Rotator(vec2 uv, float speed)
{
    uv -= vec2(0.5);
    uv = vec2(uv.x * cos(speed) - uv.y * sin(speed),
              uv.x * sin(speed) - uv.y * cos(speed));
    uv += vec2(0.5);
    return uv;
}

const float flame_engulf = 12.09;
void main(void)
{

    vec4 pos = gl_in[0].gl_Position * gl_TessCoord.x +
               gl_in[1].gl_Position * gl_TessCoord.y +
               gl_in[2].gl_Position * gl_TessCoord.z;

    vec3 normal = interpolate3D(c_normal[0],c_normal[1],c_normal[2]);
    vec3 tangent = interpolate3D(c_tangent[0],c_tangent[1],c_tangent[2]);
    v_texcoord = interpolate2D(c_texcoord[0],c_texcoord[1],c_texcoord[2]);

    mat3 M1 = mat3(IT_ModelMatrix[0].xyz, IT_ModelMatrix[1].xyz, IT_ModelMatrix[2].xyz);
    v_normal = normalize(M1 * normal);

    mat3 M2 = mat3(ModelMatrix[0].xyz, ModelMatrix[1].xyz, ModelMatrix[2].xyz);
    v_tangent = normalize(M2 * tangent);

    vec3 worldPos;


    gl_Position = ModelMatrix * pos;
    worldPos = gl_Position.xyz/gl_Position.w;

    float NdotD = dot(v_normal,windDir);

    //if(NdotD > 0)
    {
        float base = 0.5 * (NdotD + 1); // to [0,1]
        float p = pow(base,flame_engulf);
        float p1 = pow(radius, 0.5)/2;
        float p2 = clamp(pow(radius, 0.9)/0.25, 500.0, 1000.0);

        float t = time/p2 * 75;

        vec2 uv1 = vec2(2) * v_texcoord * p1 + t;
        vec2 uv2 = Rotator(vec2(1) * v_texcoord * p1,time/p2) + t;

        float alpha1 = cos((time/2) + 1)/2;
        float alpha2 = cos((time*1.5) + 1)/2;

        vec3 r10 = -mix(texture(noise,uv1).rgb,texture(noise,uv1).brg,alpha1);
        vec3 r1 = normalize(r10) + 1;

        vec3 r20 = mix(texture(noise,uv2).rgb,texture(noise,uv2).brg,alpha2);
        vec3 r2 = normalize(r20) + 1;

        float r = ((r1 + r2)/4).g;

        vec3 q = (r20 + r10 + p * windDir)/3.5;
        vec3 offset = (pow(r,4) * (v_normal + windDir) + q)  * radius * p;

        worldPos += 0.5 * offset;
    }
    v_worldPos = worldPos;
    gl_Position = ViewMatrix * vec4(worldPos,1);

    v_depth = gl_Position.zw;
    gl_Position = ProjectMatrix * gl_Position;
}
